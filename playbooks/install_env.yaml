---
- hosts: localhost
  vars:
    user_home: "/home/manuel"
    user_name: "manuel"
    go_version: "1.24.4"
  tasks:
    - name: Install required packages
      become: true
      apt:
        name:
          - xz-utils
          - unzip
          - zsh
          - curl
          - cmake
          - build-essential
          - python3
          - python3-pip
          - python3-dev
          - python3-setuptools
          - tmux
          - vim
          - nodejs
        state: "latest"

    - name: "~/.zshrc.d"
      ansible.builtin.file:
        path: "{{ user_home }}/.zshrc.d"
        state: directory

    - name: Make sure user_env.sh file is present
      ansible.builtin.file:
        path: "{{ user_home }}/.zshrc.d/user_env.sh"
        state: touch

    - name: Check if .zshrc exists
      stat:
        path: ~/.zshrc
      register: stat_rc_result

    - name: Check if .oh-my-zsh exists
      stat:
        path: ~/.oh-my-zsh
      register: stat_oh_my_zsh_result

    - name: Cloning  oh-my-zsh
      git:
        repo=https://github.com/robbyrussell/oh-my-zsh
        dest=~/.oh-my-zsh
      when: not stat_oh_my_zsh_result.stat.exists

    - name: Creating new ~/.zshrc
      copy:
        src=~/.oh-my-zsh/templates/zshrc.zsh-template
        dest=~/.zshrc
      when: not stat_rc_result.stat.exists

    - name: "Set default shell for {{ user_name }} user"
      become: true
      ansible.builtin.user:
        name: "{{ user_name }}"
        shell: /usr/bin/zsh

    - name: "Check if golang is already installed"
      ansible.builtin.shell: "go version"
      failed_when: false
      changed_when: false
      register: go_version_current

    - name: Download Go binaries
      when: go_version_current.rc != 0
      become: true
      ansible.builtin.unarchive:
        src: "https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes

          # Make sure Docker is installed
    - name: Check if docker is already installed
      become: true
      ansible.builtin.shell: "docker --version"
      failed_when: false
      changed_when: false
      register: docker_version

    - name: Download docker install script
      when: docker_version.rc != 0
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh

    - name: Install docker
      when: docker_version.rc != 0
      become: true
      ansible.builtin.shell: sh /tmp/get-docker.sh

    - name: Enable docker service
      become: true
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started

    - name: Check docker group exists
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add docker group to user
      become: true
      ansible.builtin.user:
        name: "{{ user_name }}"
        groups: docker
        append: yes

    - name: Copy vimrc configuration
      ansible.builtin.copy:
        src: templates/.vimrc
        dest: "{{ user_home }}/.vimrc"

    - name: Copy tmux configuration
      ansible.builtin.copy:
        src: templates/.tmux.conf
        dest: "{{ user_home }}/.tmux.conf"

    - name: Clone Vundle repository
      git:
        repo: https://github.com/VundleVim/Vundle.vim.git
        dest: "{{ user_home }}/.vim/bundle/Vundle.vim"
        clone: yes
        update: yes

    - name: Make sure vim plugins are installed
      ansible.builtin.shell: "vim +PluginInstall + GoInstallBinaries +qall"
    - name: Add extras to vimrc
      ansible.builtin.shell: "cat templates/.vimrc_extras >> {{ user_home }}/.vimrc"

    - name: Compile YouCompleteMe vim plugin
      ansible.builtin.shell: |
        cd {{ user_home }}/.vim/bundle/youcompleteme/
        python3 install.py

    - name: Check if awscli is already installed
      become: true
      ansible.builtin.shell: "aws --version"
      failed_when: false
      changed_when: false
      register: aws_version

    - name: Download awscliv2 install script
      when: aws_version.rc != 0
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Install awscliv2
      when: aws_version.rc != 0
      become: true
      ansible.builtin.shell: |
        cd /tmp/
        unzip awscliv2.zip
        ./aws/install

    - name: Update Zshrc file
      ansible.builtin.shell: |
        cp {{ user_home }}/.oh-my-zsh/templates/zshrc.zsh-template {{ user_home }}/.zshrc
        cat templates/zshrc_extend >> {{ user_home }}/.zshrc
